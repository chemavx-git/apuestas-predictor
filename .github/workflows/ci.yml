steps:
  # 1. Clonar el repositorio
  - name: Checkout code
    uses: actions/checkout@v3

  # 2. Configurar Python
  - name: Setup Python
    uses: actions/setup-python@v4
    with:
      python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

  # 3. Cache de dependencias pip
  - name: Cache pip
    uses: actions/cache@v3
    with:
      path: ~/.cache/pip
      key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      restore-keys: |
        ${{ runner.os }}-pip-

  # 4. Instalar dependencias
  - name: Install dependencies
    run: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt

  # 5. Ejecutar Black (formateo)
  - name: Run Black
    run: |
      black --check .

  # 6. Ejecutar Flake8 (linting)
  - name: Run Flake8
    run: |
      flake8 .

  # 7. Ejecutar tests unitarios con pytest
  - name: Run Tests
    run: |
      pytest --maxfail=1 --disable-warnings -q

  # 8. Construir imagen Docker
  - name: Build Docker image
    run: |
      docker build . -t gmktec-g5-app:${{ github.sha }}

  # 9. Login en GitHub Container Registry
  - name: Log in to GitHub Container Registry
    uses: docker/login-action@v2
    with:
      registry: ghcr.io
      username: ${{ github.actor }}
      password: ${{ secrets.GITHUB_TOKEN }}

  # 10. Etiquetar y push de la imagen a GHCR
  - name: Push Docker image to GHCR
    run: |
      IMAGE=ghcr.io/${{ github.repository_owner }}/apuestas-predictor
      TAG=${{ github.sha }}
      docker tag gmktec-g5-app:${TAG} ${IMAGE}:${TAG}
      docker tag gmktec-g5-app:${TAG} ${IMAGE}:latest
      docker push ${IMAGE}:${TAG}
      docker push ${IMAGE}:latest
