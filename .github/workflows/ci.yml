# .github/workflows/ci.yml

name: CI & Deploy Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DEFAULT_PYTHON_VERSION: '3.10'

jobs:
  ci:
    name: Lint → Test → Build & Publish Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black
        run: |
          black --check .

      - name: Run Flake8
        run: |
          flake8 .

      - name: Run Tests
        run: |
          pytest --maxfail=1 --disable-warnings -q

      - name: Build Docker image
        run: |
          docker build . -t gmktec-g5-app:${{ github.sha }}

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image to GHCR
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/apuestas-predictor
          TAG=${{ github.sha }}
          docker tag gmktec-g5-app:${TAG} ${IMAGE}:${TAG}
          docker tag gmktec-g5-app:${TAG} ${IMAGE}:latest
          docker push ${IMAGE}:${TAG}
          docker push ${IMAGE}:latest

  deploy:
    name: Deploy to K3S
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: Checkout manifests
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubeconfig
        run: |
          echo "${{ secrets.K3S_KUBECONFIG }}" | base64 --decode > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
          export KUBECONFIG=$PWD/kubeconfig.yaml

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout status deployment/apuestas-predictor
          kubectl get pods -l app=apuestas-predictor
